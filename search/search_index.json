{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ephemeral C# Library to handle time intervals (composite start and end) Support for open and closed (time) intervals. Support for common operations like Covers(), Intersect(), Join(), etc.. Support for (disjoint) collections of intervals. A new version (2.0) of this library including generic intervals is currently in development. See more info at Breaking Changes v2 Please check all the available options in the Methods Section . This documentation is hosted at albertogregorio.com/ephemeral . Examples Interval Example var now = DateTimeOffset.UtcNow; Interval yesterday = Interval.CreateOpen(now.AddDays(-1), now); Interval today = yesterday.Shift(TimeSpan.FromDays(1)); yesterday.Overlaps(today); // returns true Interval Collection Example IDisjointIntervalSet collection = new DisjointIntervalSet(); collection.Add(yesterday); collection.Add(today); collection.Start == yesterday.Start; // true collection.End == today.End; // true var collection2 = yesterday.Union(today); collection1.equals(collection2); // true var consolidatedCollection = collection2.Consolidate(); collection2.Count(); // 2 consolidatedCollection.Count(); // 1","title":"Home"},{"location":"#ephemeral","text":"C# Library to handle time intervals (composite start and end) Support for open and closed (time) intervals. Support for common operations like Covers(), Intersect(), Join(), etc.. Support for (disjoint) collections of intervals. A new version (2.0) of this library including generic intervals is currently in development. See more info at Breaking Changes v2 Please check all the available options in the Methods Section . This documentation is hosted at albertogregorio.com/ephemeral .","title":"ephemeral"},{"location":"#examples","text":"","title":"Examples"},{"location":"#interval-example","text":"var now = DateTimeOffset.UtcNow; Interval yesterday = Interval.CreateOpen(now.AddDays(-1), now); Interval today = yesterday.Shift(TimeSpan.FromDays(1)); yesterday.Overlaps(today); // returns true","title":"Interval Example"},{"location":"#interval-collection-example","text":"IDisjointIntervalSet collection = new DisjointIntervalSet(); collection.Add(yesterday); collection.Add(today); collection.Start == yesterday.Start; // true collection.End == today.End; // true var collection2 = yesterday.Union(today); collection1.equals(collection2); // true var consolidatedCollection = collection2.Consolidate(); collection2.Count(); // 2 consolidatedCollection.Count(); // 1","title":"Interval Collection Example"},{"location":"changes-v2/","text":"Changelog Version 2.x Duration() is now called Length() and it is an extension method instead of a property on IInterval DurationUntilNow() is no longer supported New \"base\" classes BasicInterval and BasicMetricInterval Interval has been renamed to StandardInterval AggregatedDuration is no longer supported in DisjointedSets Version 1.x Inclusion of DisjointInterval to collect intervals without overlaps","title":"Changelog"},{"location":"changes-v2/#changelog","text":"","title":"Changelog"},{"location":"changes-v2/#version-2x","text":"Duration() is now called Length() and it is an extension method instead of a property on IInterval DurationUntilNow() is no longer supported New \"base\" classes BasicInterval and BasicMetricInterval Interval has been renamed to StandardInterval AggregatedDuration is no longer supported in DisjointedSets","title":"Version 2.x"},{"location":"changes-v2/#version-1x","text":"Inclusion of DisjointInterval to collect intervals without overlaps","title":"Version 1.x"},{"location":"methods/","text":"Extension Methods The following methods are implemented as extension methods to be able to use them from your own implementations. Methods available from IDisjointIntervalSet Covers(t: DateTime) : bool Covers(i: IInterval) : bool Join(s: IDisjointIntevalSet) : DisjointIntevalSet Join(i: IInterval) : DisjointIntevalSet Intersect(i : IInterval) : DisjointIntevalSet Consolidate() : DisjointIntevalSet Creates a new Set with the minimum number of intervals inside (merges together intervals that are continguous) GetBoundingInterval() : Interval Methods available from IInterval Covers(t: DateTimeOffset) : bool * Shift(t: TimeSpan): Interval * Covers(i: IInterval) : bool * DurationOfIntersect(i: IInterval): TimeSpan * Intersect(i : IInterval) : Option<Interval> * Intersects(i: IInterval): bool Join(i: IInterval): Interval IsContiguouslyFollowedBy(i: IInterval) : bool IsContiguouslyPrecededBy(i: IInterval) : bool StartsBefore(i: IInterval) : bool ToInterval(): Interval Union(i: IInterval) : DisjointIntervalSet Subtract(i: IInterval) : DisjointIntervalSet Factory Methods Interval CreateClosed(start, end) CreateOpen(start, end) CreatePoint(start) DisjointIntervalSet TBD","title":"Extension Methods"},{"location":"methods/#extension-methods","text":"The following methods are implemented as extension methods to be able to use them from your own implementations.","title":"Extension Methods"},{"location":"methods/#methods-available-from-idisjointintervalset","text":"Covers(t: DateTime) : bool Covers(i: IInterval) : bool Join(s: IDisjointIntevalSet) : DisjointIntevalSet Join(i: IInterval) : DisjointIntevalSet Intersect(i : IInterval) : DisjointIntevalSet Consolidate() : DisjointIntevalSet Creates a new Set with the minimum number of intervals inside (merges together intervals that are continguous) GetBoundingInterval() : Interval","title":"Methods available from IDisjointIntervalSet"},{"location":"methods/#methods-available-from-iinterval","text":"Covers(t: DateTimeOffset) : bool * Shift(t: TimeSpan): Interval * Covers(i: IInterval) : bool * DurationOfIntersect(i: IInterval): TimeSpan * Intersect(i : IInterval) : Option<Interval> * Intersects(i: IInterval): bool Join(i: IInterval): Interval IsContiguouslyFollowedBy(i: IInterval) : bool IsContiguouslyPrecededBy(i: IInterval) : bool StartsBefore(i: IInterval) : bool ToInterval(): Interval Union(i: IInterval) : DisjointIntervalSet Subtract(i: IInterval) : DisjointIntervalSet","title":"Methods available from IInterval"},{"location":"methods/#factory-methods","text":"","title":"Factory Methods"},{"location":"methods/#interval","text":"CreateClosed(start, end) CreateOpen(start, end) CreatePoint(start)","title":"Interval"},{"location":"methods/#disjointintervalset","text":"TBD","title":"DisjointIntervalSet"}]}